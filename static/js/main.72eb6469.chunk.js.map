{"version":3,"sources":["features/cards/cardSlice.js","features/gallery/PlanetGallery.styled.js","features/card/PlanetCard.styled.js","features/card/PlanetCard.js","data/data.js","features/pagination/PlanetPaginator.styled.js","features/pagination/PlanetPaginator.js","features/gallery/PlanetGallery.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cardSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","setValue","payload","actions","selectCard","card","StyledGallery","styled","section","StyledCard","article","PlanetOrb","img","PlanetOrbSmall","PlanetCard","props","color","description","days","dist","focused","myRef","useRef","useEffect","current","console","log","scrollIntoView","behavior","block","ref","style","src","planets","id","revolutionPeriod","distToSun","Paginator","ul","PaginationItem","button","PlanetPaginator","dispatch","useDispatch","map","planet","aria","key","onClick","alt","PlanetGallery","useSelector","className","idx","App","configureStore","reducer","cardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72eb6469.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cardSlice = createSlice({\r\n  name: 'card',\r\n  initialState: {\r\n    value: 2,\r\n  },\r\n  reducers: {\r\n    increment: state => state.value += 1,\r\n    decrement: state => state.value -= 1,\r\n    setValue: (state, value) => { state.value = value.payload }\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, setValue } = cardSlice.actions;\r\n\r\nexport const selectCard = state => state.card.value;\r\n\r\nexport default cardSlice.reducer;\r\n","import styled from 'styled-components'\n\nexport const StyledGallery = styled.section`\n  display: flex;\n  overflow-x: auto;\n  overflow-y: hidden;\n  flex: none;\n  width: 100%;\n  flex-flow: row nowrap;\n  scroll-snap-type: x mandatory;\n`","import styled from 'styled-components'\n\nexport const StyledCard = styled.article`\n  scroll-snap-align: center;\n  scroll-padding: 50%;\n  color: white;\n  background: black;\n  margin: 5px;\n  min-width: 100%;\n  border-radius: 5px;\n`\n\nexport const PlanetOrb = styled.img`\n  width: 100px;\n  height: 100px;\n`\n\n\nexport const PlanetOrbSmall = styled.img`\n  width: 44px;\n  height: 44px;\n`","import React, { useRef, useEffect } from 'react';\nimport {StyledCard, PlanetOrb} from './PlanetCard.styled'\n\nexport default function PlanetCard(props) {\n  const { name, color, description, days, dist, focused } = props\n  const myRef = useRef(null);\n\n  useEffect(() => {\n    if (myRef.current && focused) {\n      console.log(focused, myRef.current)\n      myRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n    }\n  });\n\n  \n  \n  return (\n    <StyledCard ref={myRef}>\n      <h1 style={{color: color}}>{name}</h1>\n      <PlanetOrb src={`/img/${name}.png`}/>\n      <p>{description}</p>\n      {days && dist &&\n        <p>\n          <ul>\n            <li>Days to orbit: {days}</li>\n            <li>Distance to sun: {dist}</li>\n          </ul>\n        </p>\n      }\n      \n    </StyledCard>\n  );\n}\n","export const planets = [\n  {\n    id: 0,\n    name: 'Mercury',\n    color: '#CCCBCB',\n    revolutionPeriod: 88,\n    distToSun: \"57m km\",\n  },\n  {\n    id: 1,\n    name: 'Venus',\n    color: '#E2CEBC',\n    revolutionPeriod: 224,\n    distToSun: \"108m km\",\n  },\n  {\n    id: 2,\n    name: 'Earth',\n    color: '#9EBAE4',\n    revolutionPeriod: 365,\n    distToSun: \"149m km\",\n  },\n  {\n    id: 3,\n    name: 'Mars',\n    color: '#E9A08A',\n    revolutionPeriod: 687,\n    distToSun: \"227m km\",\n  },\n  {\n    id: 4,\n    name: 'Jupiter',\n    color: '#C89343',\n    revolutionPeriod: 4333,\n    distToSun: \"778m km\",\n  },\n  {\n    id: 5,\n    name: 'Saturn',\n    color: '#D9BCA1',\n    revolutionPeriod: 10759,\n    distToSun: \"1.4bn km\",\n  },\n  {\n    id: 6,\n    name: 'Uranus',\n    color: '#89AFA8',\n    revolutionPeriod: 30687,\n    distToSun: \"2.8bn km\",\n  },\n  {\n    id: 7,\n    name: 'Neptune',\n    color: '#829BE3',\n    revolutionPeriod: 60190,\n    distToSun: \"4.4bn km\",\n  },\n]","import styled from \"styled-components\"\n\nexport const Paginator = styled.ul`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1em;\n  justify-content: center;\n`\n\nexport const PaginationItem = styled.button`\n  display: inline;\n  flex-basis: 20%;\n  background: black;\n  border: none;\n` ","import React from 'react';\nimport { planets } from \"../../data/data\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  setValue,\n  selectCard,\n} from '../cards/cardSlice'; \nimport {PlanetOrbSmall} from '../card/PlanetCard.styled'\nimport { Paginator, PaginationItem } from \"./PlanetPaginator.styled\" \n\nexport default function PlanetPaginator(props) {\n  const dispatch = useDispatch();\n\n  const handleClick = (id) => {\n    dispatch(setValue(id))\n  }\n\n  return (\n    <nav>\n      <Paginator>\n        {planets.map(planet => (\n          <li>\n            <PaginationItem aria\n              key={planet.id}\n              onClick={() => handleClick(planet.id)}>\n              <PlanetOrbSmall alt={`The planet ${planet.name}`} src={`/img/${planet.name}.png`}/>\n            </PaginationItem >\n          </li> \n        )\n        )}\n      </Paginator>\n    </nav>\n  );\n}\n","import React, { useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  decrement,\n  increment,\n  selectCard,\n} from '../cards/cardSlice'\nimport { StyledGallery } from './PlanetGallery.styled'\nimport PlanetCard from '../card/PlanetCard'\nimport { planets } from \"../../data/data\"\nimport GalleryButton from \"../galleryButton/GalleryButton\"\nimport PlanetPaginator from \"../pagination/PlanetPaginator\"\n\nconst PlanetGallery = () => {\n  const card = useSelector(selectCard);\n  const dispatch = useDispatch();\n\n  console.log(card)\n\n  return (\n    <main>\n      {/* <button onClick={() => handleClick(1)}>Back</button> */}\n      <StyledGallery className={\"scroller\"}>\n        { planets.map((planet, idx) => (\n            <PlanetCard \n              key={idx}\n              name={planet.name} \n              color={planet.color} \n              days={planet.revolutionPeriod}\n              dist={planet.distToSun}\n              focused={card === planet.id}\n            />\n          )\n        )}\n      </StyledGallery>\n      {/* <button onClick={() => handleClick(Math.min(pos+1,planets.length-1))}>Forward</button> */}\n      <PlanetPaginator/>\n    </main>\n  );\n}\n\nexport default PlanetGallery;","import React from 'react';\r\nimport PlanetGallery from './features/gallery/PlanetGallery'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PlanetGallery />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport cardReducer from '../features/cards/cardSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    card: cardReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}